[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:63:32: wrong number of arguments for pattern amyc.ast.NominalTreeModule.AbstractClassDef(name: amyc.ast.NominalTreeModule.Name,polymorphicType: List[amyc.ast.NominalTreeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m        case N.AbstractClassDef(name) =>[0m
[0m[[0m[31merror[0m] [0m[0m                               ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:65:28: wrong number of arguments for pattern amyc.ast.NominalTreeModule.CaseClassDef(name: amyc.ast.NominalTreeModule.Name,fields: List[amyc.ast.NominalTreeModule.TypeTree],parent: amyc.ast.NominalTreeModule.Name,polymorphicType: List[amyc.ast.NominalTreeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m        case N.CaseClassDef(name, fields, parent) =>[0m
[0m[[0m[31merror[0m] [0m[0m                           ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:76:28: wrong number of arguments for pattern amyc.ast.NominalTreeModule.CaseClassDef(name: amyc.ast.NominalTreeModule.Name,fields: List[amyc.ast.NominalTreeModule.TypeTree],parent: amyc.ast.NominalTreeModule.Name,polymorphicType: List[amyc.ast.NominalTreeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m        case N.CaseClassDef(name, fields, parent) =>[0m
[0m[[0m[31merror[0m] [0m[0m                           ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:95:22: wrong number of arguments for pattern amyc.ast.NominalTreeModule.FunDef(name: amyc.ast.NominalTreeModule.Name,params: List[amyc.ast.NominalTreeModule.ParamDef],retType: amyc.ast.NominalTreeModule.TypeTree,body: amyc.ast.NominalTreeModule.Expr,polymorphicType: List[amyc.ast.NominalTreeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m        case N.FunDef(name, params, retType, body) =>[0m
[0m[[0m[31merror[0m] [0m[0m                     ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:111:30: wrong number of arguments for pattern amyc.ast.NominalTreeModule.AbstractClassDef(name: amyc.ast.NominalTreeModule.Name,polymorphicType: List[amyc.ast.NominalTreeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m      case N.AbstractClassDef(name) =>[0m
[0m[[0m[31merror[0m] [0m[0m                             ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:113:45: not enough arguments for method apply: (name: amyc.ast.SymbolicTreeModule.Name, polymorphicType: List[amyc.ast.SymbolicTreeModule.Name])amyc.ast.SymbolicTreeModule.AbstractClassDef in object AbstractClassDef.[0m
[0m[[0m[31merror[0m] [0m[0mUnspecified value parameter polymorphicType.[0m
[0m[[0m[31merror[0m] [0m[0m          case Some(t) => S.AbstractClassDef(t)[0m
[0m[[0m[31merror[0m] [0m[0m                                            ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:116:26: wrong number of arguments for pattern amyc.ast.NominalTreeModule.CaseClassDef(name: amyc.ast.NominalTreeModule.Name,fields: List[amyc.ast.NominalTreeModule.TypeTree],parent: amyc.ast.NominalTreeModule.Name,polymorphicType: List[amyc.ast.NominalTreeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m      case N.CaseClassDef(name, _, _) =>[0m
[0m[[0m[31merror[0m] [0m[0m                         ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:118:55: not enough arguments for method apply: (name: amyc.ast.SymbolicTreeModule.Name, fields: List[amyc.ast.SymbolicTreeModule.TypeTree], parent: amyc.ast.SymbolicTreeModule.Name, polymorphicType: List[amyc.ast.SymbolicTreeModule.Name])amyc.ast.SymbolicTreeModule.CaseClassDef in object CaseClassDef.[0m
[0m[[0m[31merror[0m] [0m[0mUnspecified value parameter polymorphicType.[0m
[0m[[0m[31merror[0m] [0m[0m          case Some((id, constrSig)) => S.CaseClassDef(id, constrSig.argTypes map S.TypeTree, constrSig.parent)[0m
[0m[[0m[31merror[0m] [0m[0m                                                      ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:126:19: wrong number of arguments for pattern amyc.ast.NominalTreeModule.FunDef(name: amyc.ast.NominalTreeModule.Name,params: List[amyc.ast.NominalTreeModule.ParamDef],retType: amyc.ast.NominalTreeModule.TypeTree,body: amyc.ast.NominalTreeModule.Expr,polymorphicType: List[amyc.ast.NominalTreeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m      val N.FunDef(name, params, retType, body) = fd[0m
[0m[[0m[31merror[0m] [0m[0m                  ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:126:20: recursive value x$5 needs type[0m
[0m[[0m[31merror[0m] [0m[0m      val N.FunDef(name, params, retType, body) = fd[0m
[0m[[0m[31merror[0m] [0m[0m                   ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/NameAnalyzer.scala:144:15: not enough arguments for method apply: (name: amyc.ast.SymbolicTreeModule.Name, params: List[amyc.ast.SymbolicTreeModule.ParamDef], retType: amyc.ast.SymbolicTreeModule.TypeTree, body: amyc.ast.SymbolicTreeModule.Expr, polymorphicType: List[amyc.ast.SymbolicTreeModule.Name])amyc.ast.SymbolicTreeModule.FunDef in object FunDef.[0m
[0m[[0m[31merror[0m] [0m[0mUnspecified value parameter polymorphicType.[0m
[0m[[0m[31merror[0m] [0m[0m      S.FunDef([0m
[0m[[0m[31merror[0m] [0m[0m              ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/analyzer/TypeChecker.scala:180:37: wrong number of arguments for pattern amyc.ast.SymbolicTreeModule.FunDef(name: amyc.ast.SymbolicTreeModule.Name,params: List[amyc.ast.SymbolicTreeModule.ParamDef],retType: amyc.ast.SymbolicTreeModule.TypeTree,body: amyc.ast.SymbolicTreeModule.Expr,polymorphicType: List[amyc.ast.SymbolicTreeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m      mod.defs.collect { case FunDef(_, params, retType, body) =>[0m
[0m[[0m[31merror[0m] [0m[0m                                    ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/ast/Printer.scala:35:28: wrong number of arguments for pattern Printer.this.treeModule.AbstractClassDef(name: Printer.this.treeModule.Name,polymorphicType: List[Printer.this.treeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m      case AbstractClassDef(name) =>[0m
[0m[[0m[31merror[0m] [0m[0m                           ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/ast/Printer.scala:38:24: wrong number of arguments for pattern Printer.this.treeModule.CaseClassDef(name: Printer.this.treeModule.Name,fields: List[Printer.this.treeModule.TypeTree],parent: Printer.this.treeModule.Name,polymorphicType: List[Printer.this.treeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m      case CaseClassDef(name, fields, parent) =>[0m
[0m[[0m[31merror[0m] [0m[0m                       ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/ast/Printer.scala:42:18: wrong number of arguments for pattern Printer.this.treeModule.FunDef(name: Printer.this.treeModule.Name,params: List[Printer.this.treeModule.ParamDef],retType: Printer.this.treeModule.TypeTree,body: Printer.this.treeModule.Expr,polymorphicType: List[Printer.this.treeModule.Name])[0m
[0m[[0m[31merror[0m] [0m[0m      case FunDef(name, params, retType, body) =>[0m
[0m[[0m[31merror[0m] [0m[0m                 ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/codegen/CodeGen.scala:26:28: not enough arguments for method apply: (name: amyc.ast.SymbolicTreeModule.Name, params: List[amyc.ast.SymbolicTreeModule.ParamDef], retType: amyc.ast.SymbolicTreeModule.TypeTree, body: amyc.ast.SymbolicTreeModule.Expr, polymorphicType: List[amyc.ast.SymbolicTreeModule.Name])amyc.ast.SymbolicTreeModule.FunDef in object FunDef.[0m
[0m[[0m[31merror[0m] [0m[0mUnspecified value parameter polymorphicType.[0m
[0m[[0m[31merror[0m] [0m[0m        val mainFd = FunDef(Identifier.fresh("main"), Nil, TypeTree(IntType), expr)[0m
[0m[[0m[31merror[0m] [0m[0m                           ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/ASTConstructor.scala:50:25: not enough arguments for method apply: (name: amyc.ast.NominalTreeModule.Name, polymorphicType: List[amyc.ast.NominalTreeModule.Name])amyc.ast.NominalTreeModule.AbstractClassDef in object AbstractClassDef.[0m
[0m[[0m[31merror[0m] [0m[0mUnspecified value parameter polymorphicType.[0m
[0m[[0m[31merror[0m] [0m[0m        AbstractClassDef(constructName(name)._1).setPos(abs)[0m
[0m[[0m[31merror[0m] [0m[0m                        ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/ASTConstructor.scala:52:21: not enough arguments for method apply: (name: amyc.ast.NominalTreeModule.Name, fields: List[amyc.ast.NominalTreeModule.TypeTree], parent: amyc.ast.NominalTreeModule.Name, polymorphicType: List[amyc.ast.NominalTreeModule.Name])amyc.ast.NominalTreeModule.CaseClassDef in object CaseClassDef.[0m
[0m[[0m[31merror[0m] [0m[0mUnspecified value parameter polymorphicType.[0m
[0m[[0m[31merror[0m] [0m[0m        CaseClassDef([0m
[0m[[0m[31merror[0m] [0m[0m                    ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/ASTConstructor.scala:58:15: not enough arguments for method apply: (name: amyc.ast.NominalTreeModule.Name, params: List[amyc.ast.NominalTreeModule.ParamDef], retType: amyc.ast.NominalTreeModule.TypeTree, body: amyc.ast.NominalTreeModule.Expr, polymorphicType: List[amyc.ast.NominalTreeModule.Name])amyc.ast.NominalTreeModule.FunDef in object FunDef.[0m
[0m[[0m[31merror[0m] [0m[0mUnspecified value parameter polymorphicType.[0m
[0m[[0m[31merror[0m] [0m[0m        FunDef([0m
[0m[[0m[31merror[0m] [0m[0m              ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/Parser.scala:85:49: Symbol does not take parameters[0m
[0m[[0m[31merror[0m] [0m[0m    'IdFunN ::= DOT() ~ 'Id ~ 'PolymorphicLPAREN() ~ 'Args ~ RPAREN() | LPAREN() ~ 'Args ~ RPAREN() | epsilon(),[0m
[0m[[0m[31merror[0m] [0m[0m                                                ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/Parser.scala:109:38: not found: value LBRACKET[0m
[0m[[0m[31merror[0m] [0m[0m    'PolymorphicDefN ::= epsilon() | LBRACKET() ~ 'Id ~ 'PolymorphicIdN ~ RBRACKET(),[0m
[0m[[0m[31merror[0m] [0m[0m                                     ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/Parser.scala:109:75: not found: value RBRACKET[0m
[0m[[0m[31merror[0m] [0m[0m    'PolymorphicDefN ::= epsilon() | LBRACKET() ~ 'Id ~ 'PolymorphicIdN ~ RBRACKET(),[0m
[0m[[0m[31merror[0m] [0m[0m                                                                          ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/Parser.scala:127:36: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Any[0m
[0m[[0m[31merror[0m] [0m[0m required: grammarcomp.grammar.CFGrammar.Grammar[?][0m
[0m[[0m[31merror[0m] [0m[0m    GrammarUtils.isLL1WithFeedback(grammar) match {[0m
[0m[[0m[31merror[0m] [0m[0m                                   ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/Parser.scala:134:50: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Any[0m
[0m[[0m[31merror[0m] [0m[0m required: grammarcomp.grammar.CFGrammar.Grammar[?][0m
[0m[[0m[31merror[0m] [0m[0m    val feedback = ParseTreeUtils.parseWithTrees(grammar, tokens.toList)[0m
[0m[[0m[31merror[0m] [0m[0m                                                 ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/Parser.scala:137:21: value constructProgram is not a member of Any[0m
[0m[[0m[31merror[0m] [0m[0m        constructor.constructProgram(s.parseTrees.head)[0m
[0m[[0m[31merror[0m] [0m[0m                    ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/elsaw/Desktop/EPFL/CLP/lab07/src/amyc/parsing/Parser.scala:139:48: value position is not a member of Any[0m
[0m[[0m[31merror[0m] [0m[0m        fatal(s"Parsing failed: $err", tok.obj.position)[0m
[0m[[0m[31merror[0m] [0m[0m                                               ^[0m
[0m[[0m[31merror[0m] [0m[0m26 errors found[0m
